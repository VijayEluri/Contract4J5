<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
  targets.xml - Common ant targets for AspectProgramming software.
  See common.xml for usage details.

  Copyright 2005-2007 Dean Wampler. All rights reserved.
  http://www.aspectprogramming.com
	 
  Licensed under the Eclipse Public License - v 1.0; you may not use this
  software except in compliance with the License. You may obtain a copy of the 
  License at
	 
	  http://www.eclipse.org/legal/epl-v10.html
	 
  A copy is also included with this distribution. See the "LICENSE" file.
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  @author Dean Wampler  dean@aspectprogramming.com
-->

<project name="targets" default="all" basedir=".">
	<dirname property="imported.basedir" file="${ant.file.imported}"/>

	<!-- A pattern set for common exclusions.
		 Note that "project.debug" is flag; is this a debug or non-debug ("release") build?
		 See below for further information.
	-->
	<patternset id="common.exclusions">
		<exclude name="**/save/**" />
		<exclude name="**/CVS/*" />
		<exclude name="**/*Test.java" unless="project.debug" />
		<exclude name="**/test/**"    unless="project.debug" />
	</patternset>
	
	<!-- Define a <patternset> for files in class (output) directories. -->
	<patternset id="classfiles.patternset">
		<include name="**/*.class" />
		<include name="**/*.properties" />
	</patternset>
	
	<!-- Define a <patternset> used to clean up "detritus" in directories,
		 such as editor backups.  Note that some of these patterns are
		 also in the default exclusion list of some <fileset>'s, meaning the
		 are ignored by default.  Therefore, clean targets that actually want
		 to remove them use this patternset in the corresponding <fileset> and
		 include the defaultexcludes="no" attribute in the <fileset> tag.
	-->
	<patternset id="detritus.patternset">
		<include name="**/*toss*" />
		<include name="**/tmp*" />
		<include name="**/*.bak" />
		<include name="**/*.save" />
		<include name="**/*~" />
		<include name="**/#*#" />
	</patternset>
	
	<!-- Define some paths before the rest of the targets. -->
	<path id="aspectj.classpath">
		<fileset dir="${aspectj.home}/lib">
			<include name="**/aspectjrt.jar"/>
			<include name="**/aspectjtools.jar"/>
		</fileset>
	</path>

	<path id="aspectj.weaver.classpath">
		<fileset dir="${aspectj.home}/lib">
			<include name="**/aspectjweaver.jar"/>
		</fileset>
	</path>
	
	<path id="junit.classpath">
		<fileset dir="${junit.home}">
			<include name="**/junit.jar"/>
		</fileset>
	</path>
	
	<path id="lib.classpath">
		<fileset dir="${contract4j5.lib}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<path id="ant.classpath">
		<fileset dir="${ant.home}/lib">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<path id="spring.classpath">
		<fileset dir="${spring.home}/dist">
			<include name="**/spring.jar"/>
		</fileset>
	</path>
	
	<path id="project.classpath">
		<path refid="junit.classpath" />
		<path refid="aspectj.classpath" />
		<path refid="lib.classpath" />
		<path refid="extra.classpath" />
	</path>
	<path id="jruby.project.classpath">
		<path refid="project.classpath" />
	</path>
	<path id="groovy.project.classpath">
		<path refid="project.classpath" />
	</path>
	<path id="groovybsf.project.classpath">
		<path refid="project.classpath" />
	</path>
	<path id="jexl.project.classpath">
		<path refid="project.classpath" />
	</path>
	<path id="jexlbsf.project.classpath">
		<path refid="project.classpath" />
	</path>
	

	<!-- "init-debug" and "init-nondebug" set miscellaneous build properties.
	   "init-debugflag" is a bit of a hack. It gets the environment variable
	   and sets a property. It's a dependent of "init", before "init-debug" and
	   "init-nondebug".
	--> 
	<target name="init-debugflag">
		<property name="project.debug" value="${environ.PROJECT_DEBUG}"/>
	</target>
	
	<target name="init-debug" if="project.debug"
		  description="Define properties for debug builds.">
		<tstamp>
			<format property="touch.time" pattern="MM/dd/yyyy hh:mm:ss.SS" />
		</tstamp>
		<property name="build.compiler.debug"      value="true"/>
		<property name="build.compiler.debuglevel" value="lines,vars,source"/>
		<property name="build.compiler.optimize"   value="false"/>
		<property name="build.compiler.verbose"    value="false"/>
		<property name="build.compiler.emacssym"   value="false"/>
		<echo>-- Project: ${ant.project.name} (${touch.time}) --</echo>
		<echo>   Debug Build: </echo>
		<echo>     Debugging:         ${build.compiler.debug}</echo>
		<echo>     Debugging Level:   ${build.compiler.debuglevel}</echo>
		<echo>     Optimization:      ${build.compiler.optimize}</echo>
	</target>
	
	<target name="init-nondebug" unless="project.debug"
		  description="Define properties for nondebug builds.">
		<tstamp>
			<format property="touch.time" pattern="MM/dd/yyyy hh:mm:ss.SS" />
		</tstamp>
		<property name="build.compiler.debug"      value="false"/>
		<property name="build.compiler.debuglevel" value=""/>
		<property name="build.compiler.optimize"   value="true"/>
		<property name="build.compiler.verbose"    value="false"/>
		<property name="build.compiler.emacssym"   value="false"/>
		<echo>-- Project: ${ant.project.name} (${touch.time}) --</echo>
		<echo>   Nondebug Build: </echo>
		<echo>     Debugging:         ${build.compiler.debug}</echo>
		<echo>     Debugging Level:   ${build.compiler.debuglevel}</echo>
		<echo>     Optimization:      ${build.compiler.optimize}</echo>
	</target>
	
	<!-- Template target for compilation of Java files using javac.
		 See the description for compileAspectJTemplate, most of which applies here.
		 This target is rarely used; AspectJ is typically used instead all
		 Java and AspectJ code.
	-->
	<target name="compileJavaCTemplate">
		<mkdir dir="${classes.reldir}"/>
		<javac
			destdir="${classes.reldir}"
			srcdir="${src.reldir}"
			debug="${build.compiler.debug}"
			debuglevel="${build.compiler.debuglevel}"
			optimize="${build.compiler.optimize}">
			<classpath refid="${classpath}"/>
			<include name="**/*.java" />
			<patternset refid="common.exclusions" />
			<patternset refid="java.exclusions" />
		</javac>
	</target>
	
	<!-- Template target for compilation of AspectJ code using iajc. 
		 Project-specific build.xml files must define the following:
			  java.exclusions (a patternset)
			  aspectj.exclusions (a patternset)
		 They list the java and aspectj files, respectively, to skip during the 
		 build. Also the following are required: 
			  src.reldir 
			  test.reldir
		 They are relative directories for "regular" and test source code.
		 The exclusions are a way of keeping files in the repository but selectively 
		 adding and removing them from the build.
		 Note: <iajc> does not yet have options for all AspectJ5 options. So, we
		 use the workaround of putting them in a file (.../ajc.args.list) and
		 including them through the "argfiles" option.
	-->
	<target name="compileAspectJTemplate" depends="init.aspectj.tasks">
		<mkdir dir="${classes.reldir}"/>
		<!-- We use an ajc.args.lst file to handle the ajc options that aren't yet 
			 supported by the ant task.-->
		<iajc
			destdir="${classes.reldir}"
			aspectpath="${aspectpath}"  
			debug="${build.compiler.debug}"
			debuglevel="${build.compiler.debuglevel}"
			deprecation="true"
			verbose="${build.compiler.verbose}"
			argfiles="${contract4j5.home}/ant/ajc.args.lst">
			<srcdir> 
				<pathelement location="${src.reldir}" />
			</srcdir>
			<classpath refid="${classpath}"/>
			<include name="**/*.java" />
			<include name="**/*.aj" />
			<patternset refid="common.exclusions" />
			<patternset refid="java.exclusions" />
			<patternset refid="aspectj.exclusions" />
		</iajc>
	</target>
	
	<!-- Template target for binary weaving of aspects into Java class files using iajc. 
		 Demonstrates binary weaving.
		 The following property is required: 
			  src.reldir 
		 Note: <iajc> does not yet have options for all AspectJ5 options. So, we
		 use the workaround of putting them in a file (.../ajc.args.list) and
		 including them through the "argfiles" option.
	-->
	<target name="binaryWeaveTemplate" depends="init.aspectj.tasks">
		<copy todir="${classes.reldir}">  
			<fileset dir="${test.reldir}"
				includes="**/*.properties" />
			<fileset dir="${test.reldir}"
				includes="**/*.xml" />
		</copy>

		<!-- We use an ajc.args.lst file to handle the ajc options that aren't yet 
			 supported by the ant task.-->
		<iajc
			source="1.5"
			inpath="${classes.reldir}"
			outjar="${project.test.jar}"
			aspectpath="${aspectpath}"  
			debug="${build.compiler.debug}"
			debuglevel="${build.compiler.debuglevel}"
			deprecation="true"
			verbose="${build.compiler.verbose}"
			inpathDirCopyFilter="**/.svn/*,**/*.java,**/*.aj,**/*.class">
			<classpath>
				<path refid="${classpath}"/>
			</classpath>
			<patternset refid="common.exclusions" />
			<patternset refid="java.exclusions" />
			<patternset refid="aspectj.exclusions" />
		</iajc>
	</target>

	<target name="init.aspectj.tasks">
		<!-- Define AspectJ tasks -->
		<taskdef
			resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties"
			classpathref="aspectj.classpath" />
	</target>
		
	<!-- Two templates for JUnit tests, without and with load-time weaving.
		 Must invoke with the following defined parameters:
		   test.jar      The relative path to the jar that contains the driver.
		   test.fileset  The name of the fileset with tests to run.
		   aspectpath    For the load-time weaving variant, only.
	-->
	<target name="junitTemplate" depends="junit.begin, _junitTemplate, junit.end" />
	<target name="junitTemplate.ltw" depends="junit.begin, _junitTemplate.ltw, junit.end" />

	<target name="junit.begin">
		<tstamp>
			<format property="start" pattern="MM/dd/yyyy hh:mm:ss.SS" />
		</tstamp>
		<echo></echo>
		<echo>  Test start time:      ${start}</echo>
		<echo>  Interpreter Language: ${interpreter.lang}</echo>
		<mkdir dir="junit_reports" />
	</target>

	<target name="_junitTemplate">
		<junit printsummary="yes" haltonfailure="no" showoutput="true" fork="yes">
			<formatter type="brief" usefile="true"/>
			<jvmarg value="${enable.asserts.flag}"/>
			<jvmarg value="-Dinterpreter=${interpreter.lang}"/>
			<jvmarg value="-Dweaving.mode=binary"/>
			<classpath>
				<pathelement location="${test.jar}"/>
				<pathelement location="${project.jar}"/>
				<path refid="${interpreter.lang}.project.classpath"/>
			</classpath>
			<batchtest todir="junit_reports">
				<fileset refid="test.fileset" />
			</batchtest>
		</junit>
	</target>
		
  <!-- To debug problems, change printsummary="yes" and showoutput="true".
       Also, edit test/META-INF/aop.xml and change weaver options.
   -->
	<target name="_junitTemplate.ltw">
		<junit printsummary="yes" haltonfailure="no" showoutput="true" fork="yes">
			<formatter type="brief" usefile="true"/>
			<jvmarg value="-Xms500m"/>
			<jvmarg value="-Xmx1000m"/>
			<jvmarg value="-Dinterpreter=${interpreter.lang}"/>
			<jvmarg value="-Dweaving.mode=ltw"/>
			<jvmarg value="${enable.asserts.flag}"/>
			<jvmarg value="-javaagent:${aspectj.home}/lib/aspectjweaver.jar"/>
			<classpath>
				<pathelement location="${test.jar}"/>
				<pathelement location="${project.jar}"/>
				<path refid="project.classpath"/>
				<path refid="aspectj.weaver.classpath"/>
			</classpath>
			<batchtest todir="junit_reports">
				<fileset refid="test.fileset" />
			</batchtest>
		</junit>
	</target>
		
	<target name="junit.end">
		<tstamp>
			<format property="stop" pattern="MM/dd/yyyy hh:mm:ss.SS" />
		</tstamp>
		<echo>  Test finish time: ${stop}</echo>
		<echo>  Test start  time: ${start}</echo>
	</target>

	<!-- Template to build ajdocs. 
		 For some reason, there doesn't appear to be an ajdoc task
		 defined in org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties, even
		 though there appears to be an ajdoc class in the the package! So, we use
		 the <apply> target. 
		 Unfortunately, this doesn't work very well; it doesn't appear to understand
		 Java 5 syntax yet. So, it's not part of the "all" target build. 
	-->
	<path id="ajdoc.classpath">    <!-- First, we define a classpath. -->
		<pathelement location="contract4j5.jar"/>
		<path refid="project.classpath"/>
	</path>
	<target name="ajdocsTemplate" depends="javadocsdir">
		<apply executable="ajdoc">
			<fileset dir="${src.path}">
				<patternset>
					<include name="**/*.java"/>
					<include name="**/*.aj"/>
				</patternset>
			</fileset>
			<arg line="-d ${javadocs.reldir} -classpath" />
			<arg pathref="ajdoc.classpath" />
			<arg line="-package -sourcepath" />
			<arg path="${src.path}" />
	<!--
			<arg line='-author -version -use -windowtitle "${ant.project.name} API" -doctitle "Aspect Programming: ${ant.project.name}" -bottom "Copyright &#169; 2005 Aspect Programming. All Rights Reserved."' />
			<arg line='-tag note:all:Note -tag todo:all:TODO' />
			<arg line='-link "http://java.sun.com/j2se/1.5.0/docs/api/"' />
			<arg value="org.contract4j5"/> 
	-->
		</apply>
	</target>
	
	<!-- Template to build javadocs. Invoke with "src.reldir" and "test.reldir"
		 defined, as for target compileAspectJTemplate above.
	-->
	<target name="javadocsTemplate" depends="javadocsdir">
		<javadoc packagenames="org.contract4j5.*"
			 destdir="${javadocs.reldir}"
			 author="true"
			 version="true"
			 use="true"
			 windowtitle="${ant.project.name} API"
			 doctitle="Aspect Programming: ${ant.project.name}"
			 bottom="Copyright &#169; 2005 Aspect Programming. All Rights Reserved.">
			<sourcepath>
				<pathelement location="${src.reldir}" />
				<pathelement location="${test.reldir}" />
			</sourcepath>
			<classpath>
				<path refid="project.classpath"/>
				<fileset dir="${java.home}/.."> <!-- java.home may be the jre subdir -->
					<include name="**/tools.jar"/>
				</fileset>
			</classpath>
			<tag name="note"  scope="all" description="Note:" />
			<tag name="todo"  scope="all" description="TODO:" />
			<link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
		</javadoc>
	</target>
	
	<target name="javadocsdir">
		<mkdir dir="${javadocs.reldir}" />
	</target>
		
	<target name="clean"        depends="clean.common, clean.project.jar" />
	<target name="clean.spring" depends="clean.common" />

	<target name="clean.common" depends="init, clean.detritus">
		<delete dir="${javadocs.reldir}" />
		<delete dir="${gensrc.reldir}" />
		<delete dir="${bin.reldir}" />  <!-- Eclipse output dir, not tools... -->
		<delete dir="${src.classes.reldir}" />
		<delete dir="${test.classes.reldir}" />
		<delete dir="junit_reports" />
		<delete>
			<fileset file="${project.test.jar}" />
			<fileset dir="." includes="TEST-*.txt" />
		</delete>
	</target>
	
	<target name="clean.project.jar">
		<delete>
			<fileset file="${project.jar}" />
		</delete>
	</target>
		
	<target name="clean.detritus" depends="init"
		  description="Clean up the editor backup files, etc.">
		<delete>
			<fileset dir="." defaultexcludes="no">
				<patternset refid="detritus.patternset" />
			</fileset>
		</delete>
	</target>
</project>
	
	
	
