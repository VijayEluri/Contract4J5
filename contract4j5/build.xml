<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
  build.xml - "Ant" build file for Aspect Programming's "Contract4J5" library.

  Copyright 2005-2006 Dean Wampler. All rights reserved.
  http://www.aspectprogramming.com
 
  Licensed under the Eclipse Public License - v 1.0; you may not use this
  software except in compliance with the License. You may obtain a copy of the 
  License at
 
      http://www.eclipse.org/legal/epl-v10.html
 
  A copy is also included with this distribution. See the "LICENSE" file.
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  @author Dean Wampler  dean@aspectprogramming.com
-->

<!-- The conventional targets, "all", "build", etc. work with the core 
	 Contract4J5 code rooted in the "src" and "test" directories. To build
   the optional "spring" example, build the "all.spring" target. 
   To build the load-time weaving (LTW) test, build "test.ltw" (load time weaving).
   To build all three options, build "all.plus.extras"
-->

<project name="Contract4J5" default="all" basedir=".">
	<import file="ant/common.xml"/>

	<!-- Pattern sets for compilation exclusions. -->
	<patternset id="java.exclusions" />
	<patternset id="aspectj.exclusions" />

	<target name="init" depends="common-init">
		<!-- This release version -->
		<property name="version"          value="050" />
		<!-- "contract4J5.jar" contains the runtime deployment aspects and classes -->
		<property name="project.jar"      value="contract4j5.jar" />
		<!-- "contract4J5-test.jar" contains the test/example aspects and classes -->
		<property name="project.test.jar" value="contract4j5-test.jar" />
		<path id="extra.classpath" />  <!-- empty by default -->
	</target>

	<target name="all" depends="init, clean, build, test, docs" />
	<target name="all.plus.extras" depends="all, test.ltw, all.spring" />
	
	<!-- Build an example using Spring configuration. -->
	<target name="all.spring" depends="init">
		<path id="extra.classpath">
			<path refid="spring.classpath" />
			<fileset file="${project.jar}" />
		</path>
		<antcall target="_all.spring">
			<param name="src.reldir"       value="${spring.example.reldir}/src" />
			<param name="test.reldir"      value="${spring.example.reldir}/test" />
			<param name="src.classes.reldir"  value="${spring.example.reldir}/src-classes" />
			<param name="test.classes.reldir" value="${spring.example.reldir}/test-classes" />
			<param name="bin.reldir"       value="${spring.example.reldir}/bin"/>
			<param name="javadocs.reldir"  value="${spring.example.reldir}/doc/api"/>
			<param name="project.test.jar" value="${spring.example.reldir}/spring_example.test.jar" />
		</antcall>
	</target>
	<!-- No "project.jar" to build, so we skip the build target and just build the test jar. -->
	<target name="_all.spring" depends="clean.spring, project-test.jar, test" />

	<target name="build" depends="init, jar" />

	<target name="jar" depends="project.jar, project-test.jar" />
	
	<target name="project.jar" depends="compile">
		<jar destfile="${project.jar}">  
			<fileset dir="${src.classes.reldir}"
			    excludes="**/test/**" />
			<fileset dir="${src.reldir}"
				includes="**/*.properties" />
		</jar>
	</target>

	<target name="project-test.jar" depends="compile-test">
		<antcall target="binaryWeaveTemplate">
			<param name="src.reldir"  value="${test.reldir}" />
			<param name="classes.reldir" value="${test.classes.reldir}" />
			<param name="aspectpath"  value="${project.jar}" />
		</antcall>
	</target>
	
	<!-- Compile the library's java and aj files with ajc -->
	<target name="compile" depends="init">
		<antcall target="compileAspectJTemplate">
			<param name="classes.reldir" value="${src.classes.reldir}" />
			<param name="aspectpath" value="" />
		</antcall>
	</target>
	
	<!-- Compile the test java files with javac (there are no aj files), then use
	     binary weaving in the jar step above. -->
	<target name="compile-test" depends="init">
		<antcall target="compileJavaCTemplate">
			<param name="src.reldir"  value="${test.reldir}" />
			<param name="classes.reldir" value="${test.classes.reldir}" />
		</antcall>
	</target>
	
	<target name="test" depends="test.groovy, test.jruby, test.jexl" />

	<target name="test.groovy" depends="test.setup">
		<antcall target="junitTemplate">
			<param name="test.jar"         value="${project.test.jar}" />
			<param name="interpreter.lang" value="groovy" />
		</antcall>
	</target>

	<target name="test.jruby" depends="test.setup">
		<antcall target="junitTemplate">
			<param name="test.jar"         value="${project.test.jar}" />
			<param name="interpreter.lang" value="jruby" />
		</antcall>
	</target>

	<target name="test.jexl" depends="test.setup">
		<antcall target="junitTemplate">
			<param name="test.jar"         value="${project.test.jar}" />
			<param name="interpreter.lang" value="jexl" />
		</antcall>
	</target>


	<!-- Run the tests using load-time weaving (LTW).
		 WARNING: This target requires AspectJ 1.5.3 or later!
	 -->
	<target name="test.load.time.weaving" depends="test.ltw" /> <!-- old name -->
  <target name="test.ltw" depends="test.ltw.groovy, test.ltw.jruby, test.ltw.jexl" />

	<target name="test.ltw.groovy" depends="compile-test, test.setup, project.unwoven.test.jar">
		<antcall target="junitTemplate.ltw">
			<param name="test.jar"    value="unwoven-${project.test.jar}" />
			<param name="aspectpath"  value="${project.jar}" />
			<param name="interpreter.lang" value="groovy" />
		</antcall>
	</target>
	
	<target name="test.ltw.jruby" depends="compile-test, test.setup, project.unwoven.test.jar">
		<antcall target="junitTemplate.ltw">
			<param name="test.jar"    value="unwoven-${project.test.jar}" />
			<param name="aspectpath"  value="${project.jar}" />
			<param name="interpreter.lang" value="jruby" />
		</antcall>
	</target>
	
	<target name="test.ltw.jexl" depends="compile-test, test.setup, project.unwoven.test.jar">
		<antcall target="junitTemplate.ltw">
			<param name="test.jar"    value="unwoven-${project.test.jar}" />
			<param name="aspectpath"  value="${project.jar}" />
			<param name="interpreter.lang" value="jexl" />
		</antcall>
	</target>
	
	<target name="project.unwoven.test.jar">
		<jar destfile="unwoven-${project.test.jar}">  
			<fileset dir="${test.classes.reldir}" />
			<fileset dir="${test.reldir}"
				includes="**/*.properties" />
			<fileset dir="${test.reldir}"
				includes="**/*.xml" />
		</jar>
	</target>

	
	<!-- Do any required test setup. -->
	<target name="test.setup" depends="init">
		<fileset dir="${test.reldir}" id="test.fileset">
		    <include name="org/contract4j5/**/test/*Test.java" />
		</fileset>
	</target>

     <!-- TODO: Use or add AJDoc. See notes in ant/targets.xml for target "ajdocsTemplate". -->
	<target name="docs" depends="init">
        <echo>Expect a few warnings when Javadoc encounters imports of AspectJ code (e.g., "Contract4J5"), which Javadoc doesn't know how to handle....</echo>
		<antcall target="javadocsTemplate">
			<param name="src.path" value="${src.reldir}" />
		</antcall>
	</target>
	
</project>

